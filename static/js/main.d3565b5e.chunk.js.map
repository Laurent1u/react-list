{"version":3,"sources":["components/Form.js","components/Todo.js","components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["Form","setInputText","saveTodo","setStatus","onSubmit","e","preventDefault","document","querySelector","value","type","className","onKeyUp","target","name","onChange","Todo","id","text","completed","deleteTodo","completeTodo","onClick","TodoList","todos","filteredTodos","map","todo","key","App","useState","inputText","setTodo","status","setFilteredTodos","useEffect","getLocalTodos","filterHandler","saveLocaleTodos","filter","localStorage","setItem","JSON","stringify","getItem","localStorageTodos","parse","Math","random","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d3565b5e.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Form = ({ setInputText, saveTodo, setStatus }) => {\r\n    // js function\r\n    const inputTextHandle = e => {\r\n        let {value} = e.target;\r\n        setInputText(value);\r\n    }\r\n\r\n    const submitTodoHandler = e => {\r\n        e.preventDefault();\r\n        saveTodo();\r\n\r\n        // reset input field\r\n        let inputField = document.querySelector('input');\r\n        inputField.value = '';\r\n    }\r\n\r\n    const statusHandler = e => {\r\n        let {value} = e.target;\r\n        setStatus(value);\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={submitTodoHandler}>\r\n            <input type=\"text\" className=\"todo-input\" onKeyUp={inputTextHandle} />\r\n            <button className=\"todo-button\" type=\"submit\">\r\n                <i className=\"fas fa-plus-square\"></i>\r\n            </button>\r\n            <div className=\"select\">\r\n                <select name=\"todos\" className=\"filter-todo\" onChange={statusHandler}>\r\n                    <option value=\"all\">All</option>\r\n                    <option value=\"completed\">Completed</option>\r\n                    <option value=\"uncompleted\">Uncompleted</option>\r\n                </select>\r\n            </div>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default Form;","import React from 'react';\r\n\r\nconst Todo = ({ id, text, completed, deleteTodo, completeTodo }) => {\r\nconst deleteHandler = () => {\r\n    deleteTodo(id);\r\n}\r\nconst completeHandler = () => {\r\n    completeTodo(id);\r\n}\r\n\r\n    return (\r\n        <div className=\"todo\">\r\n            <li className={`todo-item ${completed ? \"completed\" : \"\"}`}>{text}</li>\r\n            <button className=\"complete-btn\" onClick={completeHandler} ><i className=\"fas fa-check\"></i></button>\r\n            <button className=\"delete-btn\" onClick={deleteHandler}><i className=\"fas fa-trash\"></i></button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Todo;","import React from 'react';\r\n\r\n// import custom components\r\nimport Todo from './Todo';\r\n\r\nconst TodoList = ({ todos, deleteTodo, completeTodo, filteredTodos }) => {\r\n    return (\r\n       <div className=\"todo-container\">\r\n           <ul className=\"todo-list\">\r\n               {\r\n                   filteredTodos.map(todo => (\r\n                       <Todo \r\n                            key={todo.id}\r\n                            id={todo.id}\r\n                            text={todo.text}\r\n                            completed={todo.completed} \r\n                            deleteTodo={deleteTodo}\r\n                            completeTodo={completeTodo}\r\n                            />\r\n                   ))\r\n               }\r\n           </ul>\r\n       </div>\r\n    );\r\n}\r\n\r\nexport default TodoList;","import React, { useState, useEffect } from 'react';\nimport './App.css';\n\n// import custom components\nimport Form from \"./components/Form\";\nimport TodoList from \"./components/TodoList\";\n\nfunction App() {\n  const [inputText, setInputText] = useState(\"\");\n  const [todos, setTodo] = useState([]);\n  const [status, setStatus] = useState('all');\n  const [filteredTodos, setFilteredTodos] = useState([]);\n\n  useEffect(() => {\n    getLocalTodos();\n  }, []);\n\n  useEffect(() => {\n    filterHandler();\n    saveLocaleTodos();\n  }, [todos, status]);\n\n  const saveTodo = () => {\n    if (inputText) {\n      setTodo([...todos, {\n          id: Math.random() * 1000,\n          text: inputText, \n          completed: false}\n      ]);\n      setInputText('');\n    }\n  }\n\n  const deleteTodo = id => {\n    setTodo(todos.filter(\n      todo => todo.id !== id\n    ));\n  }\n\n  const completeTodo = id => {\n    setTodo(todos.map(todo => {\n        if(todo.id === id) {\n          return {\n            ...todo, completed: !todo.completed\n          }\n        }\n        return todo;\n    }));\n  }\n\n  const filterHandler = () => {\n    switch(status) {\n      case \"completed\":\n        setFilteredTodos(todos.filter(todo => todo.completed === true));\n      break;\n      case \"uncompleted\":\n        setFilteredTodos(todos.filter(todo => todo.completed === false));\n      break;\n      default:\n        setFilteredTodos(todos);\n      break;\n    }\n  }\n\n  const saveLocaleTodos = () => {\n    localStorage.setItem(\"todos\", JSON.stringify(todos));\n  }\n\n  const getLocalTodos = () => {\n    if(localStorage.getItem('todos')) {\n      const localStorageTodos = JSON.parse(localStorage.getItem(\"todos\"));\n      setTodo(localStorageTodos);\n    }\n  }\n\n  return (\n    <div>\n      <header>\n        <h1>Shopping List</h1>\n      </header>\n      <Form \n        setInputText={setInputText} \n        saveTodo={saveTodo} \n        setStatus={setStatus} \n        />\n      <TodoList \n        todos={todos} \n        deleteTodo={deleteTodo} \n        completeTodo={completeTodo}\n        filteredTodos={filteredTodos} \n        />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}